{"version":3,"sources":["../../../telemetry/trace/autoparent.ts"],"sourcesContent":["import { trace, Span } from './trace'\nimport { debugLog } from './shared'\n\nconst stacks = new WeakMap<any, Array<Span>>()\nconst stoppedSpansSets = new WeakMap<any, Set<Span>>()\n\nexport function stackPush(keyObj: any, spanName: string, attrs?: any): Span {\n  let stack = stacks.get(keyObj)\n  let span\n\n  if (!stack) {\n    stack = []\n    stacks.set(keyObj, stack)\n    span = trace(spanName, undefined, attrs ? attrs() : undefined)\n  } else {\n    const parent = stack[stack.length - 1]\n    if (parent) {\n      span = trace(spanName, parent.id, attrs ? attrs() : undefined)\n    } else {\n      span = trace(spanName, undefined, attrs ? attrs() : undefined)\n    }\n  }\n\n  stack.push(span)\n  return span\n}\n\nexport function stackPop(keyObj: any, span: any): void {\n  let stack = stacks.get(keyObj)\n  if (!stack) {\n    debugLog(\n      'Attempted to pop from non-existent stack. Key reference must be bad.'\n    )\n    return\n  }\n\n  let stoppedSpans = stoppedSpansSets.get(keyObj)\n  if (!stoppedSpans) {\n    stoppedSpans = new Set()\n    stoppedSpansSets.set(keyObj, stoppedSpans)\n  }\n  if (stoppedSpans.has(span)) {\n    debugLog(\n      `Attempted to terminate tracing span that was already stopped for ${span.name}`\n    )\n    return\n  }\n\n  while (true) {\n    let poppedSpan = stack.pop()\n\n    if (poppedSpan && poppedSpan === span) {\n      stoppedSpans.add(poppedSpan)\n      span.stop()\n      stoppedSpans.add(span)\n      break\n    } else if (poppedSpan === undefined || stack.indexOf(span) === -1) {\n      // We've either reached the top of the stack or the stack doesn't contain\n      // the span for another reason.\n      debugLog(`Tracing span was not found in stack for: ${span.name}`)\n      stoppedSpans.add(span)\n      span.stop()\n      break\n    } else if (stack.indexOf(span) !== -1) {\n      debugLog(\n        `Attempted to pop span that was not at top of stack for: ${span.name}`\n      )\n      stoppedSpans.add(poppedSpan)\n      poppedSpan.stop()\n    }\n  }\n}\n"],"names":[],"mappings":";;;;QAMgB,SAAS,GAAT,SAAS;QAqBT,QAAQ,GAAR,QAAQ;AA3BI,GAAS,CAAT,MAAS;AACZ,GAAU,CAAV,OAAU;AAEnC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO;AAC1B,KAAK,CAAC,gBAAgB,GAAG,GAAG,CAAC,OAAO;SAEpB,SAAS,CAAC,MAAW,EAAE,QAAgB,EAAE,KAAW,EAAQ,CAAC;IAC3E,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM;IAC7B,GAAG,CAAC,IAAI;IAER,EAAE,GAAG,KAAK,EAAE,CAAC;QACX,KAAK;QACL,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK;QACxB,IAAI,OAboB,MAAS,QAapB,QAAQ,EAAE,SAAS,EAAE,KAAK,GAAG,KAAK,KAAK,SAAS;IAC/D,CAAC,MAAM,CAAC;QACN,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;QACrC,EAAE,EAAE,MAAM,EAAE,CAAC;YACX,IAAI,OAjBkB,MAAS,QAiBlB,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,GAAG,KAAK,KAAK,SAAS;QAC/D,CAAC,MAAM,CAAC;YACN,IAAI,OAnBkB,MAAS,QAmBlB,QAAQ,EAAE,SAAS,EAAE,KAAK,GAAG,KAAK,KAAK,SAAS;QAC/D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,IAAI;WACR,IAAI;AACb,CAAC;SAEe,QAAQ,CAAC,MAAW,EAAE,IAAS,EAAQ,CAAC;IACtD,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM;IAC7B,EAAE,GAAG,KAAK,EAAE,CAAC;YA5BU,OAAU,YA8B7B,oEAAsE;;IAG1E,CAAC;IAED,GAAG,CAAC,YAAY,GAAG,gBAAgB,CAAC,GAAG,CAAC,MAAM;IAC9C,EAAE,GAAG,YAAY,EAAE,CAAC;QAClB,YAAY,GAAG,GAAG,CAAC,GAAG;QACtB,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY;IAC3C,CAAC;IACD,EAAE,EAAE,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC;YAxCN,OAAU,YA0C5B,iEAAiE,EAAE,IAAI,CAAC,IAAI;;IAGjF,CAAC;UAEM,IAAI,CAAE,CAAC;QACZ,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG;QAE1B,EAAE,EAAE,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;YACtC,YAAY,CAAC,GAAG,CAAC,UAAU;YAC3B,IAAI,CAAC,IAAI;YACT,YAAY,CAAC,GAAG,CAAC,IAAI;;QAEvB,CAAC,MAAM,EAAE,EAAE,UAAU,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;YAClE,EAAyE,AAAzE,uEAAyE;YACzE,EAA+B,AAA/B,6BAA+B;gBAzDZ,OAAU,YA0DnB,yCAAyC,EAAE,IAAI,CAAC,IAAI;YAC9D,YAAY,CAAC,GAAG,CAAC,IAAI;YACrB,IAAI,CAAC,IAAI;;QAEX,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;gBA9DnB,OAAU,YAgE1B,wDAAwD,EAAE,IAAI,CAAC,IAAI;YAEtE,YAAY,CAAC,GAAG,CAAC,UAAU;YAC3B,UAAU,CAAC,IAAI;QACjB,CAAC;IACH,CAAC;AACH,CAAC"}